# Stubs for ssl (Python 2)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
from _ssl import _SSLContext
from _ssl import txt2obj as _txt2obj, nid2obj as _nid2obj
from socket import socket, error as socket_error
from socket import socket
from collections import namedtuple

CHANNEL_BINDING_TYPES = ... # type: Any

class CertificateError(ValueError): ...

def match_hostname(cert, hostname): ...

DefaultVerifyPaths = namedtuple('DefaultVerifyPaths', 'cafile capath openssl_cafile_env openssl_cafile openssl_capath_env openssl_capath')

def get_default_verify_paths(): ...

class _ASN1Object:
    def __new__(cls, oid): ...
    @classmethod
    def fromnid(cls, nid): ...
    @classmethod
    def fromname(cls, name): ...

class Purpose(_ASN1Object): ...

class SSLContext(_SSLContext):
    def __new__(cls, protocol, *args, **kwargs): ...
    protocol = ... # type: Any
    def __init__(self, protocol): ...
    def wrap_socket(self, sock, server_side=False, do_handshake_on_connect=True, suppress_ragged_eofs=True, server_hostname=None): ...
    def set_npn_protocols(self, npn_protocols): ...
    def set_alpn_protocols(self, alpn_protocols): ...
    def load_default_certs(self, purpose=...): ...

def create_default_context(purpose=..., cafile=None, capath=None, cadata=None): ...

class SSLSocket(socket):
    keyfile = ... # type: Any
    certfile = ... # type: Any
    cert_reqs = ... # type: Any
    ssl_version = ... # type: Any
    ca_certs = ... # type: Any
    ciphers = ... # type: Any
    server_side = ... # type: Any
    server_hostname = ... # type: Any
    do_handshake_on_connect = ... # type: Any
    suppress_ragged_eofs = ... # type: Any
    def __init__(self, sock=None, keyfile=None, certfile=None, server_side=False, cert_reqs=..., ssl_version=..., ca_certs=None, do_handshake_on_connect=True, family=..., type=..., proto=0, fileno=None, suppress_ragged_eofs=True, npn_protocols=None, ciphers=None, server_hostname=None, _context=None): ...
    @property
    def context(self): ...
    @context.setter
    def context(self, ctx): ...
    def dup(self): ...
    def read(self, len=0, buffer=None): ...
    def write(self, data): ...
    def getpeercert(self, binary_form=False): ...
    def selected_npn_protocol(self): ...
    def selected_alpn_protocol(self): ...
    def cipher(self): ...
    def compression(self): ...
    def send(self, data, flags=0): ...
    def sendto(self, data, flags_or_addr, addr=None): ...
    def sendall(self, data, flags=0): ...
    def recv(self, buflen=1024, flags=0): ...
    def recv_into(self, buffer, nbytes=None, flags=0): ...
    def recvfrom(self, buflen=1024, flags=0): ...
    def recvfrom_into(self, buffer, nbytes=None, flags=0): ...
    def pending(self): ...
    def shutdown(self, how): ...
    def close(self): ...
    def unwrap(self): ...
    def do_handshake(self, block=False): ...
    def connect(self, addr): ...
    def connect_ex(self, addr): ...
    def accept(self): ...
    def makefile(self, mode='', bufsize=-1): ...
    def get_channel_binding(self, cb_type=''): ...
    def version(self): ...

def wrap_socket(sock, keyfile=None, certfile=None, server_side=False, cert_reqs=..., ssl_version=..., ca_certs=None, do_handshake_on_connect=True, suppress_ragged_eofs=True, ciphers=None): ...
def cert_time_to_seconds(cert_time): ...

PEM_HEADER = ... # type: Any
PEM_FOOTER = ... # type: Any

def DER_cert_to_PEM_cert(der_cert_bytes): ...
def PEM_cert_to_DER_cert(pem_cert_string): ...
def get_server_certificate(addr, ssl_version=..., ca_certs=None): ...
def get_protocol_name(protocol_code): ...
def sslwrap_simple(sock, keyfile=None, certfile=None): ...
